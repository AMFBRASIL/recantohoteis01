<?php

namespace Modules\Stock\Models;

use Modules\Booking\Models\Bookable;
use Illuminate\Database\Eloquent\SoftDeletes;
use Modules\Core\Models\SEO;

class StockAdjustment extends Bookable
{
    use SoftDeletes;

    protected $table = 'bravo_stock_adjustment';
    public $type = 'stock_adjustment';
    protected $slugField     = false;

    protected $adjustmentTranslationClass;

    protected $casts = [
        'product_composition' => 'array',
    ];

    protected $movementTypes = [
        1 => "Saldo Real",
        2 => "Somar Qtde",
        3 => "Diminuir Qtde",
    ];

    protected $fillable = [
        'movement_type',
        'shipping_price',
        'product_composition',
        'content',
        'send_section_mail',
        'send_supplier_mail',
        'status',
    ];

    public function __construct(array $attributes = [])
    {
        parent::__construct($attributes);
        $this->adjustmentTranslationClass = StockAdjustmentTranslation::class;
    }

    public function setShippingPriceAttribute($value)
    {
        $this->attributes['shipping_price'] = str_replace(',', '.', str_replace('.', '', $value));
    }

    public function getShippingPriceFormattedAttribute()
    {
        $value = '0,00';
        if ($this->shipping_price) {
            $value = number_format($this->shipping_price, 2, ',', '.');
        }

        return 'R$ ' . $value;
    }

    public function getMovementTypeFormattedAttribute()
    {
        return array_key_exists($this->movement_type, $this->movementTypes) ? $this->movementTypes[$this->movement_type] : '';
    }

    public static function getConditionalFormattedAttribute($value)
    {
        if (! $value) {
            return __('NÃ£o');
        }

        return __('Sim');
    }

    public static function getModelName()
    {
        return __("StockAdjustment");
    }

    public static function getTableName()
    {
        return with(new static)->table;
    }

    public function saveCloneByID($clone_id)
    {
        $old = parent::find($clone_id);
        if (empty($old)) return false;
        $new = $old->replicate();
        $new->save();

        //Language
        $langs = $this->adjustmentTranslationClass::where("origin_id", $old->id)->get();
        if (!empty($langs)) {
            foreach ($langs as $lang) {
                $langNew = $lang->replicate();
                $langNew->origin_id = $new->id;
                $langNew->save();
                $langSeo = SEO::where('object_id', $lang->id)->where('object_model', $lang->getSeoType() . "_" . $lang->locale)->first();
                if (!empty($langSeo)) {
                    $langSeoNew = $langSeo->replicate();
                    $langSeoNew->object_id = $langNew->id;
                    $langSeoNew->save();
                }
            }
        }
    }

    public function fill(array $attributes)
    {
        if (!empty($attributes)) {
            foreach ($this->fillable as $item) {
                $attributes[$item] = $attributes[$item] ?? null;
            }
        }
        return parent::fill($attributes); // TODO: Change the autogenerated stub
    }

    public function __toString()
    {
        return sprintf('%s: Tipo %s - Frete: %s', $this->id, $this->movement_type_formatted, $this->shipping_price);
    }

    public function getStockUpdatedFromValue($newValue, $oldValue)
    {
        if ($this->movement_type == 1) {
            return $newValue;
        }

        if ($this->movement_type == 2) {
            return $newValue + $oldValue;
        }

        $result = $oldValue - $newValue;
        return $result >= 0 ? $result : 0;
    }
}
