<?php

namespace Modules\Supplier\Models;

use App\Currency;
use Illuminate\Http\Response;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Cache;
use Illuminate\Support\Facades\Validator;
use Illuminate\Http\Request;
use Modules\Booking\Models\Bookable;
use Modules\Booking\Models\Booking;
use Modules\Core\Models\SEO;
use Modules\Media\Helpers\FileHelper;
use Illuminate\Database\Eloquent\SoftDeletes;
use Modules\Supplier\Models\SupplierTranslation;

class Supplier extends Bookable
{
    use SoftDeletes;

    protected $table = 'bravo_suppliers';
    public $type = 'supplier';

    protected $fillable = [
        'title',
        'contact',
        'person_type',
        'document',
        'state_registration',
        'city_registration',
        'taxpayer',
        'birthdate',

        // Address
        'zipcode',
        'street_name',
        'street_number',
        'neighborhood',
        'complement',
        'city',
        'state',

        // Contact
        'home_number',
        'phone_number',
        'whatsapp',
        'website',
        'email',
        'contact_name',
        'contact_complement',
        'comments',

        // Config
        'is_simples',
        'is_rural',
        'is_shipping',

        // Images
        'image_id',
        'banner_image_id',

        // Role configs
        'status',
    ];
    protected $slugField = 'slug';
    protected $slugFromField = 'title';

    protected $supplierTranslationClass;

    public function __construct(array $attributes = [])
    {
        parent::__construct($attributes);
        $this->supplierTranslationClass = SupplierTranslation::class;
    }

    public static function getModelName()
    {
        return __("Supplier");
    }

    public function getPersonTypeFormattedAttribute()
    {
        if (! $this->person_type) {
            return '';
        }

        return $this->person_type == 1 ? 'Pessoa Jurídica' : 'Pessoa Física';
    }

    public static function getTableName()
    {
        return with(new static)->table;
    }

    public function getEditUrl()
    {
        return url(route('supplier.admin.edit', ['id' => $this->id]));
    }

    public function fill(array $attributes)
    {
        if (!empty($attributes)) {
            foreach ($this->fillable as $item) {
                $attributes[$item] = $attributes[$item] ?? null;
            }
        }
        return parent::fill($attributes); // TODO: Change the autogenerated stub
    }

    public function isBookable()
    {
        if ($this->status != 'publish')
            return false;
        return parent::isBookable();
    }

    public static function searchForMenu($q = false)
    {
        $query = static::select('id', 'title as name');
        if (strlen($q)) {

            $query->where('title', 'like', "%" . $q . "%");
        }
        $a = $query->limit(10)->get();
        return $a;
    }

    public function saveCloneByID($clone_id)
    {
        $old = parent::find($clone_id);
        if (empty($old)) return false;
        $selected_terms = $old->terms->pluck('term_id');
        $old->title = $old->title . " - Copy";
        $new = $old->replicate();
        $new->save();

        //Language
        $langs = $this->supplierTranslationClass::where("origin_id", $old->id)->get();
        if (!empty($langs)) {
            foreach ($langs as $lang) {
                $langNew = $lang->replicate();
                $langNew->origin_id = $new->id;
                $langNew->save();
                $langSeo = SEO::where('object_id', $lang->id)->where('object_model', $lang->getSeoType() . "_" . $lang->locale)->first();
                if (!empty($langSeo)) {
                    $langSeoNew = $langSeo->replicate();
                    $langSeoNew->object_id = $langNew->id;
                    $langSeoNew->save();
                }
            }
        }
    }

    public static function getServiceIconFeatured()
    {
        return "icofont-ticket";
    }

    public static function isEnable()
    {
        return setting_item('event_disable') == false;
    }

    public static function isEnableEnquiry()
    {
        if (!empty(setting_item('booking_enquiry_for_event'))) {
            return true;
        }
        return false;
    }

    public static function isFormEnquiryAndBook()
    {
        $check = setting_item('booking_enquiry_for_event');
        if (!empty($check) and setting_item('booking_enquiry_type') == "booking_and_enquiry") {
            return true;
        }
        return false;
    }

    public static function getBookingEnquiryType()
    {
        $check = setting_item('booking_enquiry_for_event');
        if (!empty($check)) {
            if (setting_item('booking_enquiry_type') == "only_enquiry") {
                return "enquiry";
            }
        }
        return "book";
    }
}
